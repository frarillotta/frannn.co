self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./constants.tsx":
/*!***********************!*\
  !*** ./constants.tsx ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shaders": function() { return /* binding */ shaders; },
/* harmony export */   "p5": function() { return /* binding */ p5; },
/* harmony export */   "roles": function() { return /* binding */ roles; },
/* harmony export */   "terms": function() { return /* binding */ terms; },
/* harmony export */   "homepageText": function() { return /* binding */ homepageText; },
/* harmony export */   "aboutPageContent": function() { return /* binding */ aboutPageContent; }
/* harmony export */ });
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "../node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_Anchor_Anchor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/Anchor/Anchor */ "./components/Anchor/Anchor.tsx");
/* harmony import */ var _components_Shader_Shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Shader/Shader */ "./components/Shader/Shader.tsx");
/* harmony import */ var _components_TextCarousel_TextCarousel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/TextCarousel/TextCarousel */ "./components/TextCarousel/TextCarousel.tsx");
/* module decorator */ module = __webpack_require__.hmd(module);


var _jsxFileName = "C:\\Users\\frari\\Desktop\\dev\\personal-site\\src\\constants.tsx";



var shaders = {
  fullscreenFbm: {
    fragmentShader: "#ifdef GL_ES\n    precision mediump float;\n    #endif\n    #ifndef FNC_MOD289\n    #define FNC_MOD289\n    float mod289(in float x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec2 mod289(in vec2 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec3 mod289(in vec3 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec4 mod289(in vec4 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    #endif\n    #ifndef FNC_PERMUTE\n    #define FNC_PERMUTE\n    float permute(in float x) {\n         return mod289(((x * 34.) + 1.)*x);\n    }\n    \n    vec3 permute(in vec3 x) {\n      return mod289(((x*34.0)+1.0)*x);\n    }\n    \n    vec4 permute(in vec4 x) {\n         return mod289(((x * 34.) + 1.)*x);\n    }\n    #endif\n    \n    #ifndef FNC_TAYLORINVSQRT\n    #define FNC_TAYLORINVSQRT\n    float taylorInvSqrt(in float r) {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    \n    vec4 taylorInvSqrt(in vec4 r) {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    #endif\n    #ifndef FNC_GRAD4\n    #define FNC_GRAD4\n    vec4 grad4(float j, vec4 ip) {\n        const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n        vec4 p,s;\n    \n        p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n        p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n        s = vec4(lessThan(p, vec4(0.0)));\n        p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n    \n        return p;\n    }\n    #endif\n    \n    \n    /*\n    author: [Ian McEwan, Ashima Arts]\n    description: Simplex Noise https://github.com/ashima/webgl-noise\n    use: snoise(<vec2|vec3|vec4> pos)\n    license: |\n      Copyright (C) 2011 Ashima Arts. All rights reserved.\n      Copyright (C) 2011-2016 by Stefan Gustavson (Classic noise and others)\n      Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n      Neither the name of the GPUImage framework nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  \n    */\n    \n    #ifndef FNC_SNOISE\n    #define FNC_SNOISE\n    float snoise(in vec2 v) {\n        const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                            -0.577350269189626,  // -1.0 + 2.0 * C.x\n                            0.024390243902439); // 1.0 / 41.0\n        // First corner\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n    \n        // Other corners\n        vec2 i1;\n        //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n        //i1.y = 1.0 - i1.x;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        // x0 = x0 - 0.0 + 0.0 * C.xx ;\n        // x1 = x0 - i1 + 1.0 * C.xx ;\n        // x2 = x0 - 1.0 + 2.0 * C.xx ;\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n    \n        // Permutations\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n    \n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n    \n        // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n        // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n    \n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n    \n        // Normalise gradients implicitly by scaling m\n        // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    \n        // Compute final noise value at P\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n    \n    \n    float snoise(in vec3 v) {\n        const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n        const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n        // First corner\n        vec3 i  = floor(v + dot(v, C.yyy) );\n        vec3 x0 =   v - i + dot(i, C.xxx) ;\n    \n        // Other corners\n        vec3 g = step(x0.yzx, x0.xyz);\n        vec3 l = 1.0 - g;\n        vec3 i1 = min( g.xyz, l.zxy );\n        vec3 i2 = max( g.xyz, l.zxy );\n    \n        //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n        //   x1 = x0 - i1  + 1.0 * C.xxx;\n        //   x2 = x0 - i2  + 2.0 * C.xxx;\n        //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n        vec3 x1 = x0 - i1 + C.xxx;\n        vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n        vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n    \n        // Permutations\n        i = mod289(i);\n        vec4 p = permute( permute( permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n        float n_ = 0.142857142857; // 1.0/7.0\n        vec3  ns = n_ * D.wyz - D.xzx;\n    \n        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n    \n        vec4 x_ = floor(j * ns.z);\n        vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n    \n        vec4 x = x_ *ns.x + ns.yyyy;\n        vec4 y = y_ *ns.x + ns.yyyy;\n        vec4 h = 1.0 - abs(x) - abs(y);\n    \n        vec4 b0 = vec4( x.xy, y.xy );\n        vec4 b1 = vec4( x.zw, y.zw );\n    \n        //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n        //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n        vec4 s0 = floor(b0)*2.0 + 1.0;\n        vec4 s1 = floor(b1)*2.0 + 1.0;\n        vec4 sh = -step(h, vec4(0.0));\n    \n        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n        vec3 p0 = vec3(a0.xy,h.x);\n        vec3 p1 = vec3(a0.zw,h.y);\n        vec3 p2 = vec3(a1.xy,h.z);\n        vec3 p3 = vec3(a1.zw,h.w);\n    \n        //Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n    \n        // Mix final noise value\n        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n        m = m * m;\n        return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                    dot(p2,x2), dot(p3,x3) ) );\n    }\n    \n    float snoise(in vec4 v) {\n        const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                            0.276393202250021,  // 2 * G4\n                            0.414589803375032,  // 3 * G4\n                            -0.447213595499958); // -1 + 4 * G4\n    \n        // First corner\n        vec4 i  = floor(v + dot(v, vec4(.309016994374947451)) ); // (sqrt(5) - 1)/4\n        vec4 x0 = v -   i + dot(i, C.xxxx);\n    \n        // Other corners\n    \n        // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n        vec4 i0;\n        vec3 isX = step( x0.yzw, x0.xxx );\n        vec3 isYZ = step( x0.zww, x0.yyz );\n        //  i0.x = dot( isX, vec3( 1.0 ) );\n        i0.x = isX.x + isX.y + isX.z;\n        i0.yzw = 1.0 - isX;\n        //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n        i0.y += isYZ.x + isYZ.y;\n        i0.zw += 1.0 - isYZ.xy;\n        i0.z += isYZ.z;\n        i0.w += 1.0 - isYZ.z;\n    \n        // i0 now contains the unique values 0,1,2,3 in each channel\n        vec4 i3 = clamp( i0, 0.0, 1.0 );\n        vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n        vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n    \n        //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n        //  x1 = x0 - i1  + 1.0 * C.xxxx\n        //  x2 = x0 - i2  + 2.0 * C.xxxx\n        //  x3 = x0 - i3  + 3.0 * C.xxxx\n        //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n        vec4 x1 = x0 - i1 + C.xxxx;\n        vec4 x2 = x0 - i2 + C.yyyy;\n        vec4 x3 = x0 - i3 + C.zzzz;\n        vec4 x4 = x0 + C.wwww;\n    \n        // Permutations\n        i = mod289(i);\n        float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n        vec4 j1 = permute( permute( permute( permute (\n                    i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n                + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n                + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n                + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n    \n        // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n        // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n        vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n    \n        vec4 p0 = grad4(j0,   ip);\n        vec4 p1 = grad4(j1.x, ip);\n        vec4 p2 = grad4(j1.y, ip);\n        vec4 p3 = grad4(j1.z, ip);\n        vec4 p4 = grad4(j1.w, ip);\n    \n        // Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n        p4 *= taylorInvSqrt(dot(p4,p4));\n    \n        // Mix contributions from the five corners\n        vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n        vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n        m0 = m0 * m0;\n        m1 = m1 * m1;\n        return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                    + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n    }\n    \n    vec3 snoise3( vec3 x ){\n        float s  = snoise(vec3( x ));\n        float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n        float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n        vec3 c = vec3( s , s1 , s2 );\n        return c;\n    }\n    \n    vec3 snoise3( vec4 x ){\n        float s  = snoise(vec4( x ));\n        float s1 = snoise(vec4( x.y - 19.1 , x.z + 33.4 , x.x + 47.2, x.w ));\n        float s2 = snoise(vec4( x.z + 74.2 , x.x - 124.5 , x.y + 99.4, x.w ));\n        vec3 c = vec3( s , s1 , s2 );\n        return c;\n    }\n    \n    #endif\n    \n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse; \n    uniform float u_time;\n    vec2 ratio(in vec2 st, in vec2 s) {\n        return mix( vec2((st.x*s.x/s.y)-(s.x*.5-s.y*.5)/s.y,st.y),\n                    vec2(st.x,st.y*(s.y/s.x)-(s.y*.5-s.x*.5)/s.x),\n                    step(s.x,s.y));\n    }\n    \n    #ifndef FBM_OCTAVES\n    #define FBM_OCTAVES 4\n    #endif\n    \n    #ifndef FBM_NOISE_FNC\n    #define FBM_NOISE_FNC(POS_UV) snoise(POS_UV)\n    #endif\n    \n    #ifndef FBM_VALUE_INITIAL\n    #define FBM_VALUE_INITIAL 0.0\n    #endif\n    \n    #ifndef FBM_SCALE_SCALAR\n    #define FBM_SCALE_SCALAR 2.0\n    #endif\n    \n    #ifndef FBM_AMPLITUD_INITIAL\n    #define FBM_AMPLITUD_INITIAL 0.5\n    #endif\n    \n    #ifndef FBM_AMPLITUD_SCALAR\n    #define FBM_AMPLITUD_SCALAR 0.5\n    #endif\n    \n    #ifndef FNC_FBM\n    #define FNC_FBM\n    float fbm(in vec2 st) {\n        // Initial values\n        float value = FBM_VALUE_INITIAL;\n        float amplitud = FBM_AMPLITUD_INITIAL;\n    \n        // Loop of octaves\n        for (int i = 0; i < FBM_OCTAVES; i++) {\n            value += amplitud * FBM_NOISE_FNC(st);\n            st *= FBM_SCALE_SCALAR;\n            amplitud *= FBM_AMPLITUD_SCALAR;\n        }\n        return value;\n    }\n    \n    float fbm(in vec3 pos) {\n        // Initial values\n        float value = FBM_VALUE_INITIAL;\n        float amplitud = FBM_AMPLITUD_INITIAL;\n    \n        // Loop of octaves\n        for (int i = 0; i < FBM_OCTAVES; i++) {\n            value += amplitud * FBM_NOISE_FNC(pos);\n            pos *= FBM_SCALE_SCALAR;\n            amplitud *= FBM_AMPLITUD_SCALAR;\n        }\n        return value;\n    }\n    #endif\n    \n    void main() {\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\n        st = ratio(st, u_resolution);\n    \n        float n = 0.4 + snoise(vec3(st, u_time)) * 0.8;\n    \n        float noise = fbm(vec3(st, u_time/10.));\n        float noise2 = fbm(vec3(st, noise));\n        float noise3 = fbm(vec3(st, noise2));\n        float noise4 = fbm(vec3(st, noise3));\n    \n        vec3 color = vec3(st.x,st.y, 1.);\n    \n        color += noise4;\n    \n        gl_FragColor = vec4(color,1.0);\n    }"
  },
  raymarching: {
    fragmentShader: "#ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse;\n    uniform float u_time;\n    float PI = 3.14155925;\n    \n    #ifndef FNC_RATIO\n    #define FNC_RATIO\n    vec2 ratio(in vec2 st, in vec2 s) {\n        return mix( vec2((st.x*s.x/s.y)-(s.x*.5-s.y*.5)/s.y,st.y),\n                    vec2(st.x,st.y*(s.y/s.x)-(s.y*.5-s.x*.5)/s.x),\n                    step(s.x,s.y));\n    }\n    #endif\n    \n    \n    \n    float sdSphere(vec3 p, float r) {\n        return length(p)-r;\n    }\n    \n    vec2 mousePos = (u_mouse/u_resolution.xy)-.5;\n    \n    mat4 rotationMatrix(vec3 axis, float angle) {\n        axis = normalize(axis);\n        float s = sin(angle);\n        float c = cos(angle);\n        float oc = 1.0 - c;\n        \n        return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                    0.0,                                0.0,                                0.0,                                1.0);\n    }\n    \n    vec3 rotate(vec3 v, vec3 axis, float angle) {\n      mat4 m = rotationMatrix(axis, angle);\n      return (m * vec4(v, 1.0)).xyz;\n    }\n    \n    float sdBox( vec3 p, vec3 b )\n    {\n      vec3 q = abs(p) - b;\n      return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n    }\n    \n    // polynomial smooth min (k = 0.1);\n    float smin( float a, float b, float k )\n    {\n        float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n        return mix( b, a, h ) - k*h*(1.0-h);\n    }\n    \n    float sdf(vec3 p) {\n        vec3 p1 = rotate(p, vec3(1.), u_time/2.);\n        // float box = sdBox(p1, vec3(0.3));\n        float box = smin(sdBox(p1, vec3(0.2)), sdSphere(p, 0.2), .2);\n    \n        float sphere = sdSphere(p - vec3(.5, .491, 0.), 0.2);\n    \n        return smin(box, sphere, .4);\n    }\n    \n    vec3 calcNormal( in vec3 p ) // for function f(p)\n    {\n        const float eps = 0.0001; // or some other value\n        const vec2 h = vec2(eps,0);\n        return normalize( vec3(sdf(p+h.xyy) - sdf(p-h.xyy),\n                               sdf(p+h.yxy) - sdf(p-h.yxy),\n                               sdf(p+h.yyx) - sdf(p-h.yyx) ) );\n    }\n    \n    \n    \n    float luma(vec3 color) {\n      return dot(color, vec3(0.299, 0.587, 0.114));\n    }\n    \n    float luma(vec4 color) {\n      return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n    }\n    \n    \n    float dither8x8(vec2 position, float brightness) {\n      int x = int(mod(position.x, 8.0));\n      int y = int(mod(position.y, 8.0));\n      int index = x + y * 8;\n      float limit = 0.0;\n    \n      if (x < 8) {\n        if (index == 0) limit = 0.015625;\n        if (index == 1) limit = 0.515625;\n        if (index == 2) limit = 0.140625;\n        if (index == 3) limit = 0.640625;\n        if (index == 4) limit = 0.046875;\n        if (index == 5) limit = 0.546875;\n        if (index == 6) limit = 0.171875;\n        if (index == 7) limit = 0.671875;\n        if (index == 8) limit = 0.765625;\n        if (index == 9) limit = 0.265625;\n        if (index == 10) limit = 0.890625;\n        if (index == 11) limit = 0.390625;\n        if (index == 12) limit = 0.796875;\n        if (index == 13) limit = 0.296875;\n        if (index == 14) limit = 0.921875;\n        if (index == 15) limit = 0.421875;\n        if (index == 16) limit = 0.203125;\n        if (index == 17) limit = 0.703125;\n        if (index == 18) limit = 0.078125;\n        if (index == 19) limit = 0.578125;\n        if (index == 20) limit = 0.234375;\n        if (index == 21) limit = 0.734375;\n        if (index == 22) limit = 0.109375;\n        if (index == 23) limit = 0.609375;\n        if (index == 24) limit = 0.953125;\n        if (index == 25) limit = 0.453125;\n        if (index == 26) limit = 0.828125;\n        if (index == 27) limit = 0.328125;\n        if (index == 28) limit = 0.984375;\n        if (index == 29) limit = 0.484375;\n        if (index == 30) limit = 0.859375;\n        if (index == 31) limit = 0.359375;\n        if (index == 32) limit = 0.0625;\n        if (index == 33) limit = 0.5625;\n        if (index == 34) limit = 0.1875;\n        if (index == 35) limit = 0.6875;\n        if (index == 36) limit = 0.03125;\n        if (index == 37) limit = 0.53125;\n        if (index == 38) limit = 0.15625;\n        if (index == 39) limit = 0.65625;\n        if (index == 40) limit = 0.8125;\n        if (index == 41) limit = 0.3125;\n        if (index == 42) limit = 0.9375;\n        if (index == 43) limit = 0.4375;\n        if (index == 44) limit = 0.78125;\n        if (index == 45) limit = 0.28125;\n        if (index == 46) limit = 0.90625;\n        if (index == 47) limit = 0.40625;\n        if (index == 48) limit = 0.25;\n        if (index == 49) limit = 0.75;\n        if (index == 50) limit = 0.125;\n        if (index == 51) limit = 0.625;\n        if (index == 52) limit = 0.21875;\n        if (index == 53) limit = 0.71875;\n        if (index == 54) limit = 0.09375;\n        if (index == 55) limit = 0.59375;\n        if (index == 56) limit = 1.0;\n        if (index == 57) limit = 0.5;\n        if (index == 58) limit = 0.875;\n        if (index == 59) limit = 0.375;\n        if (index == 60) limit = 0.96875;\n        if (index == 61) limit = 0.46875;\n        if (index == 62) limit = 0.84375;\n        if (index == 63) limit = 0.34375;\n      }\n    \n      return brightness < limit ? 0.0 : 1.0;\n    }\n    \n    vec3 dither8x8(vec2 position, vec3 color) {\n      return color * dither8x8(position, luma(color));\n    }\n    \n    vec4 dither8x8(vec2 position, vec4 color) {\n      return vec4(color.rgb * dither8x8(position, luma(color)), 1.0);\n    }\n    \n    \n    \n    void main() {\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\n        st = ratio(st, u_resolution);\n        vec3 color = vec3(0.);\n    \n        float dist = length(st - vec2(0.5));\n        vec3 bg = mix(vec3(0.), vec3(.3), dist);\n        vec3 camPos = vec3(0., 0., 3.);\n        vec3 ray = normalize(vec3(st - .5, -1.5));\n    \n        vec3 rayPos = camPos;\n        float t = 0.;\n        float tMax = 5.;\n        for (int i = 0; i < 256; i++) {\n            vec3 pos = camPos + t*ray;\n            float h = sdf(pos);\n            if (h < 0.0001 || t > tMax) {\n                break; \n            }\n            t += h;\n        }\n    \n        // color = bg; \n    \n        if (t < tMax) {\n            vec3 pos = camPos + t*ray;\n            color = vec3(1.);\n            vec3 normal = calcNormal(pos);\n            color = normal;\n            float diff = dot(vec3(1.), normal);\n            color = vec3(diff);\n            float fresnel = pow(1. + dot(ray, normal), 1.);\n            color = vec3(fresnel);\n            color = mix(color, bg, -fresnel);\n        }\n        color = vec3(dither8x8(gl_FragCoord.xy, color));\n    \n    \n        gl_FragColor = vec4(color,1.0);\n    }"
  },
  fbm: {
    fragmentShader: "#ifdef GL_ES\n    precision mediump float;\n    #endif\n    #ifndef FNC_MOD289\n    #define FNC_MOD289\n    float mod289(in float x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec2 mod289(in vec2 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec3 mod289(in vec3 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec4 mod289(in vec4 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    #endif\n    #ifndef FNC_PERMUTE\n    #define FNC_PERMUTE\n    float permute(in float x) {\n        return mod289(((x * 34.) + 1.)*x);\n    }\n    \n    vec3 permute(in vec3 x) {\n      return mod289(((x*34.0)+1.0)*x);\n    }\n    \n    vec4 permute(in vec4 x) {\n        return mod289(((x * 34.) + 1.)*x);\n    }\n    #endif\n    \n    #ifndef FNC_TAYLORINVSQRT\n    #define FNC_TAYLORINVSQRT\n    float taylorInvSqrt(in float r) {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    \n    vec4 taylorInvSqrt(in vec4 r) {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    #endif\n    #ifndef FNC_GRAD4\n    #define FNC_GRAD4\n    vec4 grad4(float j, vec4 ip) {\n        const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n        vec4 p,s;\n    \n        p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n        p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n        s = vec4(lessThan(p, vec4(0.0)));\n        p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n    \n        return p;\n    }\n    #endif\n    \n    \n    /*\n    author: [Ian McEwan, Ashima Arts]\n    description: Simplex Noise https://github.com/ashima/webgl-noise\n    use: snoise(<vec2|vec3|vec4> pos)\n    license: |\n      Copyright (C) 2011 Ashima Arts. All rights reserved.\n      Copyright (C) 2011-2016 by Stefan Gustavson (Classic noise and others)\n      Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n      Neither the name of the GPUImage framework nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  \n    */\n    \n    #ifndef FNC_SNOISE\n    #define FNC_SNOISE\n    float snoise(in vec2 v) {\n        const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                            -0.577350269189626,  // -1.0 + 2.0 * C.x\n                            0.024390243902439); // 1.0 / 41.0\n        // First corner\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n    \n        // Other corners\n        vec2 i1;\n        //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n        //i1.y = 1.0 - i1.x;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        // x0 = x0 - 0.0 + 0.0 * C.xx ;\n        // x1 = x0 - i1 + 1.0 * C.xx ;\n        // x2 = x0 - 1.0 + 2.0 * C.xx ;\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n    \n        // Permutations\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n    \n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n    \n        // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n        // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n    \n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n    \n        // Normalise gradients implicitly by scaling m\n        // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    \n        // Compute final noise value at P\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n    \n    \n    float snoise(in vec3 v) {\n        const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n        const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n        // First corner\n        vec3 i  = floor(v + dot(v, C.yyy) );\n        vec3 x0 =   v - i + dot(i, C.xxx) ;\n    \n        // Other corners\n        vec3 g = step(x0.yzx, x0.xyz);\n        vec3 l = 1.0 - g;\n        vec3 i1 = min( g.xyz, l.zxy );\n        vec3 i2 = max( g.xyz, l.zxy );\n    \n        //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n        //   x1 = x0 - i1  + 1.0 * C.xxx;\n        //   x2 = x0 - i2  + 2.0 * C.xxx;\n        //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n        vec3 x1 = x0 - i1 + C.xxx;\n        vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n        vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n    \n        // Permutations\n        i = mod289(i);\n        vec4 p = permute( permute( permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n        float n_ = 0.142857142857; // 1.0/7.0\n        vec3  ns = n_ * D.wyz - D.xzx;\n    \n        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n    \n        vec4 x_ = floor(j * ns.z);\n        vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n    \n        vec4 x = x_ *ns.x + ns.yyyy;\n        vec4 y = y_ *ns.x + ns.yyyy;\n        vec4 h = 1.0 - abs(x) - abs(y);\n    \n        vec4 b0 = vec4( x.xy, y.xy );\n        vec4 b1 = vec4( x.zw, y.zw );\n    \n        //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n        //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n        vec4 s0 = floor(b0)*2.0 + 1.0;\n        vec4 s1 = floor(b1)*2.0 + 1.0;\n        vec4 sh = -step(h, vec4(0.0));\n    \n        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n        vec3 p0 = vec3(a0.xy,h.x);\n        vec3 p1 = vec3(a0.zw,h.y);\n        vec3 p2 = vec3(a1.xy,h.z);\n        vec3 p3 = vec3(a1.zw,h.w);\n    \n        //Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n    \n        // Mix final noise value\n        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n        m = m * m;\n        return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                    dot(p2,x2), dot(p3,x3) ) );\n    }\n    \n    float snoise(in vec4 v) {\n        const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                            0.276393202250021,  // 2 * G4\n                            0.414589803375032,  // 3 * G4\n                            -0.447213595499958); // -1 + 4 * G4\n    \n        // First corner\n        vec4 i  = floor(v + dot(v, vec4(.309016994374947451)) ); // (sqrt(5) - 1)/4\n        vec4 x0 = v -   i + dot(i, C.xxxx);\n    \n        // Other corners\n    \n        // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n        vec4 i0;\n        vec3 isX = step( x0.yzw, x0.xxx );\n        vec3 isYZ = step( x0.zww, x0.yyz );\n        //  i0.x = dot( isX, vec3( 1.0 ) );\n        i0.x = isX.x + isX.y + isX.z;\n        i0.yzw = 1.0 - isX;\n        //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n        i0.y += isYZ.x + isYZ.y;\n        i0.zw += 1.0 - isYZ.xy;\n        i0.z += isYZ.z;\n        i0.w += 1.0 - isYZ.z;\n    \n        // i0 now contains the unique values 0,1,2,3 in each channel\n        vec4 i3 = clamp( i0, 0.0, 1.0 );\n        vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n        vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n    \n        //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n        //  x1 = x0 - i1  + 1.0 * C.xxxx\n        //  x2 = x0 - i2  + 2.0 * C.xxxx\n        //  x3 = x0 - i3  + 3.0 * C.xxxx\n        //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n        vec4 x1 = x0 - i1 + C.xxxx;\n        vec4 x2 = x0 - i2 + C.yyyy;\n        vec4 x3 = x0 - i3 + C.zzzz;\n        vec4 x4 = x0 + C.wwww;\n    \n        // Permutations\n        i = mod289(i);\n        float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n        vec4 j1 = permute( permute( permute( permute (\n                    i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n                + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n                + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n                + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n    \n        // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n        // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n        vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n    \n        vec4 p0 = grad4(j0,   ip);\n        vec4 p1 = grad4(j1.x, ip);\n        vec4 p2 = grad4(j1.y, ip);\n        vec4 p3 = grad4(j1.z, ip);\n        vec4 p4 = grad4(j1.w, ip);\n    \n        // Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n        p4 *= taylorInvSqrt(dot(p4,p4));\n    \n        // Mix contributions from the five corners\n        vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n        vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n        m0 = m0 * m0;\n        m1 = m1 * m1;\n        return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                    + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n    }\n    \n    vec3 snoise3( vec3 x ){\n        float s  = snoise(vec3( x ));\n        float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n        float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n        vec3 c = vec3( s , s1 , s2 );\n        return c;\n    }\n    \n    vec3 snoise3( vec4 x ){\n        float s  = snoise(vec4( x ));\n        float s1 = snoise(vec4( x.y - 19.1 , x.z + 33.4 , x.x + 47.2, x.w ));\n        float s2 = snoise(vec4( x.z + 74.2 , x.x - 124.5 , x.y + 99.4, x.w ));\n        vec3 c = vec3( s , s1 , s2 );\n        return c;\n    }\n    \n    #endif\n    \n    \n    uniform vec2 u_resolution;\n    uniform float u_time;\n    vec2 ratio(in vec2 st, in vec2 s) {\n        return mix( vec2((st.x*s.x/s.y)-(s.x*.5-s.y*.5)/s.y,st.y),\n                    vec2(st.x,st.y*(s.y/s.x)-(s.y*.5-s.x*.5)/s.x),\n                    step(s.x,s.y));\n    }\n    \n    #ifndef FBM_OCTAVES\n    #define FBM_OCTAVES 4\n    #endif\n    \n    #ifndef FBM_NOISE_FNC\n    #define FBM_NOISE_FNC(POS_UV) snoise(POS_UV)\n    #endif\n    \n    #ifndef FBM_VALUE_INITIAL\n    #define FBM_VALUE_INITIAL 0.0\n    #endif\n    \n    #ifndef FBM_SCALE_SCALAR\n    #define FBM_SCALE_SCALAR 2.0\n    #endif\n    \n    #ifndef FBM_AMPLITUD_INITIAL\n    #define FBM_AMPLITUD_INITIAL 0.5\n    #endif\n    \n    #ifndef FBM_AMPLITUD_SCALAR\n    #define FBM_AMPLITUD_SCALAR 0.5\n    #endif\n    \n    #ifndef FNC_FBM\n    #define FNC_FBM\n    float fbm(in vec2 st) {\n        // Initial values\n        float value = FBM_VALUE_INITIAL;\n        float amplitud = FBM_AMPLITUD_INITIAL;\n    \n        // Loop of octaves\n        for (int i = 0; i < FBM_OCTAVES; i++) {\n            value += amplitud * FBM_NOISE_FNC(st);\n            st *= FBM_SCALE_SCALAR;\n            amplitud *= FBM_AMPLITUD_SCALAR;\n        }\n        return value;\n    }\n    \n    float fbm(in vec3 pos) {\n        // Initial values\n        float value = FBM_VALUE_INITIAL;\n        float amplitud = FBM_AMPLITUD_INITIAL;\n    \n        // Loop of octaves\n        for (int i = 0; i < FBM_OCTAVES; i++) {\n            value += amplitud * FBM_NOISE_FNC(pos);\n            pos *= FBM_SCALE_SCALAR;\n            amplitud *= FBM_AMPLITUD_SCALAR;\n        }\n        return value;\n    }\n    #endif\n    \n    void main() {\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\n        vec2 ratiost = ratio(st, u_resolution);\n    \n    \n        float noise = fbm(vec3(ratiost, u_time/40.));\n        float noise2 = fbm(vec3(ratiost, noise));\n        float noise3 = fbm(vec3(ratiost, noise2));\n    \n        vec3 color = vec3(0.);\n    \n        color = vec3(ratiost.x,ratiost.y, 1.);\n        color += noise3;\n    \n        color -= distance(vec2(st.y, st.x), vec2(0., st.x))*3.;\n    \n        gl_FragColor = vec4(color,1.);\n    }"
  },
  template: {
    fragmentShader: "#ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse; \n    uniform float u_time;\n    \n    \n    void main() {\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\n        vec3 color = vec3(0.);\n    \n        color = vec3(st.x,st.y,abs(sin(u_time)));\n    \n        gl_FragColor = vec4(color,1.0);\n    }"
  },
  ditherTexture: {
    fragmentShader: "// Author:\n    // Title:\n    \n    precision mediump float;\n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse; \n    uniform float u_time;\n    \n    uniform sampler2D u_texture_1;\n    uniform vec2 u_texture_1_Resolution;\n    \n    \n    float luma(vec3 color) {\n      return dot(color, vec3(0.299, 0.587, 0.114));\n    }\n    \n    float luma(vec4 color) {\n      return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n    }\n    \n    \n    float dither8x8(vec2 position, float brightness) {\n      int x = int(mod(position.x, 8.0));\n      int y = int(mod(position.y, 8.0));\n      int index = x + y * 8;\n      float limit = 0.0;\n    \n      if (x < 8) {\n        if (index == 0) limit = 0.015625;\n        if (index == 1) limit = 0.515625;\n        if (index == 2) limit = 0.140625;\n        if (index == 3) limit = 0.640625;\n        if (index == 4) limit = 0.046875;\n        if (index == 5) limit = 0.546875;\n        if (index == 6) limit = 0.171875;\n        if (index == 7) limit = 0.671875;\n        if (index == 8) limit = 0.765625;\n        if (index == 9) limit = 0.265625;\n        if (index == 10) limit = 0.890625;\n        if (index == 11) limit = 0.390625;\n        if (index == 12) limit = 0.796875;\n        if (index == 13) limit = 0.296875;\n        if (index == 14) limit = 0.921875;\n        if (index == 15) limit = 0.421875;\n        if (index == 16) limit = 0.203125;\n        if (index == 17) limit = 0.703125;\n        if (index == 18) limit = 0.078125;\n        if (index == 19) limit = 0.578125;\n        if (index == 20) limit = 0.234375;\n        if (index == 21) limit = 0.734375;\n        if (index == 22) limit = 0.109375;\n        if (index == 23) limit = 0.609375;\n        if (index == 24) limit = 0.953125;\n        if (index == 25) limit = 0.453125;\n        if (index == 26) limit = 0.828125;\n        if (index == 27) limit = 0.328125;\n        if (index == 28) limit = 0.984375;\n        if (index == 29) limit = 0.484375;\n        if (index == 30) limit = 0.859375;\n        if (index == 31) limit = 0.359375;\n        if (index == 32) limit = 0.0625;\n        if (index == 33) limit = 0.5625;\n        if (index == 34) limit = 0.1875;\n        if (index == 35) limit = 0.6875;\n        if (index == 36) limit = 0.03125;\n        if (index == 37) limit = 0.53125;\n        if (index == 38) limit = 0.15625;\n        if (index == 39) limit = 0.65625;\n        if (index == 40) limit = 0.8125;\n        if (index == 41) limit = 0.3125;\n        if (index == 42) limit = 0.9375;\n        if (index == 43) limit = 0.4375;\n        if (index == 44) limit = 0.78125;\n        if (index == 45) limit = 0.28125;\n        if (index == 46) limit = 0.90625;\n        if (index == 47) limit = 0.40625;\n        if (index == 48) limit = 0.25;\n        if (index == 49) limit = 0.75;\n        if (index == 50) limit = 0.125;\n        if (index == 51) limit = 0.625;\n        if (index == 52) limit = 0.21875;\n        if (index == 53) limit = 0.71875;\n        if (index == 54) limit = 0.09375;\n        if (index == 55) limit = 0.59375;\n        if (index == 56) limit = 1.0;\n        if (index == 57) limit = 0.5;\n        if (index == 58) limit = 0.875;\n        if (index == 59) limit = 0.375;\n        if (index == 60) limit = 0.96875;\n        if (index == 61) limit = 0.46875;\n        if (index == 62) limit = 0.84375;\n        if (index == 63) limit = 0.34375;\n      }\n    \n      return brightness < limit ? 0.0 : 1.0;\n    }\n    \n    vec3 dither8x8(vec2 position, vec3 color) {\n      return color * dither8x8(position, luma(color));\n    }\n    \n    vec4 dither8x8(vec2 position, vec4 color) {\n      return vec4(color.rgb * dither8x8(position, luma(color)), 1.0);\n    }\n    \n    \n    #ifndef FNC_RATIO\n    #define FNC_RATIO\n    vec2 ratio(in vec2 st, in vec2 s) {\n        return mix( vec2((st.x*s.x/s.y)-(s.x*.5-s.y*.5)/s.y,st.y),\n                    vec2(st.x,st.y*(s.y/s.x)-(s.y*.5-s.x*.5)/s.x),\n                    step(s.x,s.y));\n    }\n    #endif\n    \n    void main() {\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\n        st = ratio(st, u_resolution);\n        vec4 color = vec4(st.x,st.y,0.0,1.0);\n    \n    \n        float grid = u_resolution.x/3.5;\n        vec2 st_f = fract(st);\n        vec2 st_i = floor(st * grid)/grid;\n        // st_i = st;\n        \n        // color = vec4(st.x,st.y,abs(sin(u_time)), 1.);\n        color = texture2D(u_texture_1,st_i);\n        color = vec4(dither8x8(gl_FragCoord.xy, color));\n    \n    \n        gl_FragColor = color;\n    }",
    texture: "/assets/pictures/a.jpg"
  },
  simplexNoise: {
    fragmentShader: " #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse;\n    uniform float u_time;\n    \n    #ifndef FNC_RATIO\n    #define FNC_RATIO\n    vec2 ratio(in vec2 st, in vec2 s) {\n        return mix( vec2((st.x*s.x/s.y)-(s.x*.5-s.y*.5)/s.y,st.y),\n                    vec2(st.x,st.y*(s.y/s.x)-(s.y*.5-s.x*.5)/s.x),\n                    step(s.x,s.y));\n    }\n    #endif\n    #ifndef FNC_HSV2RGB\n    #define FNC_HSV2RGB\n    vec3 hsv2rgb(in vec3 hsb) {\n        vec3 rgb = clamp(abs(mod(hsb.x * 6. + vec3(0., 4., 2.), \n                                6.) - 3.) - 1.,\n                          0.,\n                          1.);\n        #ifdef HSV2RGB_SMOOTH\n        rgb = rgb*rgb*(3. - 2. * rgb);\n        #endif\n        return hsb.z * mix(vec3(1.), rgb, hsb.y);\n    }\n    \n    vec4 hsv2rgb(in vec4 hsb) {\n        return vec4(hsv2rgb(hsb.rgb), hsb.a);\n    }\n    #endif\n    \n    #ifndef FNC_MOD289\n    #define FNC_MOD289\n    float mod289(in float x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec2 mod289(in vec2 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec3 mod289(in vec3 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    \n    vec4 mod289(in vec4 x) {\n      return x - floor(x * (1. / 289.)) * 289.;\n    }\n    #endif\n    \n    #ifndef FNC_PERMUTE\n    #define FNC_PERMUTE\n    float permute(in float x) {\n         return mod289(((x * 34.) + 1.)*x);\n    }\n    \n    vec3 permute(in vec3 x) {\n      return mod289(((x*34.0)+1.0)*x);\n    }\n    \n    vec4 permute(in vec4 x) {\n         return mod289(((x * 34.) + 1.)*x);\n    }\n    #endif\n    \n    \n    #ifndef FNC_TAYLORINVSQRT\n    #define FNC_TAYLORINVSQRT\n    float taylorInvSqrt(in float r) {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    \n    vec4 taylorInvSqrt(in vec4 r) {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n    #endif\n    \n    #ifndef FNC_GRAD4\n    #define FNC_GRAD4\n    vec4 grad4(float j, vec4 ip) {\n        const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n        vec4 p,s;\n    \n        p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n        p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n        s = vec4(lessThan(p, vec4(0.0)));\n        p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n    \n        return p;\n    }\n    #endif\n    \n    \n    /*\n    author: [Ian McEwan, Ashima Arts]\n    description: Simplex Noise https://github.com/ashima/webgl-noise\n    use: snoise(<vec2|vec3|vec4> pos)\n    license: |\n      Copyright (C) 2011 Ashima Arts. All rights reserved.\n      Copyright (C) 2011-2016 by Stefan Gustavson (Classic noise and others)\n      Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n      Neither the name of the GPUImage framework nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  \n    */\n    \n    #ifndef FNC_SNOISE\n    #define FNC_SNOISE\n    float snoise(in vec2 v) {\n        const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                            -0.577350269189626,  // -1.0 + 2.0 * C.x\n                            0.024390243902439); // 1.0 / 41.0\n        // First corner\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n    \n        // Other corners\n        vec2 i1;\n        //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n        //i1.y = 1.0 - i1.x;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        // x0 = x0 - 0.0 + 0.0 * C.xx ;\n        // x1 = x0 - i1 + 1.0 * C.xx ;\n        // x2 = x0 - 1.0 + 2.0 * C.xx ;\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n    \n        // Permutations\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n    \n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n    \n        // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n        // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n    \n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n    \n        // Normalise gradients implicitly by scaling m\n        // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    \n        // Compute final noise value at P\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n    \n    \n    float snoise(in vec3 v) {\n        const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n        const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n        // First corner\n        vec3 i  = floor(v + dot(v, C.yyy) );\n        vec3 x0 =   v - i + dot(i, C.xxx) ;\n    \n        // Other corners\n        vec3 g = step(x0.yzx, x0.xyz);\n        vec3 l = 1.0 - g;\n        vec3 i1 = min( g.xyz, l.zxy );\n        vec3 i2 = max( g.xyz, l.zxy );\n    \n        //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n        //   x1 = x0 - i1  + 1.0 * C.xxx;\n        //   x2 = x0 - i2  + 2.0 * C.xxx;\n        //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n        vec3 x1 = x0 - i1 + C.xxx;\n        vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n        vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n    \n        // Permutations\n        i = mod289(i);\n        vec4 p = permute( permute( permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n        float n_ = 0.142857142857; // 1.0/7.0\n        vec3  ns = n_ * D.wyz - D.xzx;\n    \n        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n    \n        vec4 x_ = floor(j * ns.z);\n        vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n    \n        vec4 x = x_ *ns.x + ns.yyyy;\n        vec4 y = y_ *ns.x + ns.yyyy;\n        vec4 h = 1.0 - abs(x) - abs(y);\n    \n        vec4 b0 = vec4( x.xy, y.xy );\n        vec4 b1 = vec4( x.zw, y.zw );\n    \n        //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n        //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n        vec4 s0 = floor(b0)*2.0 + 1.0;\n        vec4 s1 = floor(b1)*2.0 + 1.0;\n        vec4 sh = -step(h, vec4(0.0));\n    \n        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n        vec3 p0 = vec3(a0.xy,h.x);\n        vec3 p1 = vec3(a0.zw,h.y);\n        vec3 p2 = vec3(a1.xy,h.z);\n        vec3 p3 = vec3(a1.zw,h.w);\n    \n        //Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n    \n        // Mix final noise value\n        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n        m = m * m;\n        return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                    dot(p2,x2), dot(p3,x3) ) );\n    }\n    \n    float snoise(in vec4 v) {\n        const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                            0.276393202250021,  // 2 * G4\n                            0.414589803375032,  // 3 * G4\n                            -0.447213595499958); // -1 + 4 * G4\n    \n        // First corner\n        vec4 i  = floor(v + dot(v, vec4(.309016994374947451)) ); // (sqrt(5) - 1)/4\n        vec4 x0 = v -   i + dot(i, C.xxxx);\n    \n        // Other corners\n    \n        // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n        vec4 i0;\n        vec3 isX = step( x0.yzw, x0.xxx );\n        vec3 isYZ = step( x0.zww, x0.yyz );\n        //  i0.x = dot( isX, vec3( 1.0 ) );\n        i0.x = isX.x + isX.y + isX.z;\n        i0.yzw = 1.0 - isX;\n        //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n        i0.y += isYZ.x + isYZ.y;\n        i0.zw += 1.0 - isYZ.xy;\n        i0.z += isYZ.z;\n        i0.w += 1.0 - isYZ.z;\n    \n        // i0 now contains the unique values 0,1,2,3 in each channel\n        vec4 i3 = clamp( i0, 0.0, 1.0 );\n        vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n        vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n    \n        //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n        //  x1 = x0 - i1  + 1.0 * C.xxxx\n        //  x2 = x0 - i2  + 2.0 * C.xxxx\n        //  x3 = x0 - i3  + 3.0 * C.xxxx\n        //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n        vec4 x1 = x0 - i1 + C.xxxx;\n        vec4 x2 = x0 - i2 + C.yyyy;\n        vec4 x3 = x0 - i3 + C.zzzz;\n        vec4 x4 = x0 + C.wwww;\n    \n        // Permutations\n        i = mod289(i);\n        float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n        vec4 j1 = permute( permute( permute( permute (\n                    i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n                + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n                + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n                + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n    \n        // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n        // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n        vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n    \n        vec4 p0 = grad4(j0,   ip);\n        vec4 p1 = grad4(j1.x, ip);\n        vec4 p2 = grad4(j1.y, ip);\n        vec4 p3 = grad4(j1.z, ip);\n        vec4 p4 = grad4(j1.w, ip);\n    \n        // Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n        p4 *= taylorInvSqrt(dot(p4,p4));\n    \n        // Mix contributions from the five corners\n        vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n        vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n        m0 = m0 * m0;\n        m1 = m1 * m1;\n        return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                    + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n    }\n    \n    vec3 snoise3( vec3 x ){\n        float s  = snoise(vec3( x ));\n        float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n        float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n        vec3 c = vec3( s , s1 , s2 );\n        return c;\n    }\n    \n    vec3 snoise3( vec4 x ){\n        float s  = snoise(vec4( x ));\n        float s1 = snoise(vec4( x.y - 19.1 , x.z + 33.4 , x.x + 47.2, x.w ));\n        float s2 = snoise(vec4( x.z + 74.2 , x.x - 124.5 , x.y + 99.4, x.w ));\n        vec3 c = vec3( s , s1 , s2 );\n        return c;\n    }\n    \n    #endif\n    \n    \n    void main() {\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\n        st = ratio(st, u_resolution);\n        vec3 color = vec3(0.);\n    \n        float grid = u_resolution.x/50.;\n        vec2 st_i = floor(st * grid)/grid;\n    \n        float n = 0.4 + snoise(vec3(st_i, u_time)) * 0.8;\n          \n        color += hsv2rgb(vec3(n * .41, 1., 1.));\n    \n        gl_FragColor = vec4(color,1.0);\n    }"
  },
  sun: {
    fragmentShader: "#ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse; \n    uniform float u_time;\n    \n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    #ifndef FNC_STROKE\n    #define FNC_STROKE\n    \n    float stroke(float x, float s, float w) {\n        float d= step(s, x+w*.5) - step(s, x-w*.5);\n        return clamp(d, 0., 1.);\n    }\n    \n    #endif\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    #ifndef FNC_CIRCLESDF\n    #define FNC_CIRCLESDF\n    \n    float circleSDF(vec2 st) {\n    \n        return length(st-.5)*2.;\n    \n    }\n    \n    #endif\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    #ifndef FNC_FILL\n    #define FNC_FILL\n    \n    float fill(float x, float size) {\n        return 1.-step(size, x);\n    }\n    \n    #endif\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    #ifndef FNC_TRISDF\n    #define FNC_TRISDF\n    \n    float triSDF(vec2 st) {\n    \n        st = (st*2.-1.)*2.;\n        return max(abs(st.x) * 0.866025 +st.y * 0.5, -st.y * 0.5);\n    \n    }\n    \n    #endif\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    #ifndef FNC_ROTATE\n    #define FNC_ROTATE\n    \n    vec2 rotate(vec2 st, float a) {\n        st = mat2(cos(a), -sin(a),\n                    sin(a), cos(a))*(st-.5);\n        return st+.5;\n    }\n    \n    #endif\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    #ifndef FNC_POLYSDF\n    #define FNC_POLYSDF\n    \n    #ifndef PI\n    #define PI 3.1415926535897932384626433832795\n    #endif\n    \n    #ifndef TAU\n    #define TAU 6.2831853071795864769252867665590\n    #endif\n    \n    float polySDF(vec2 st, int V) {\n    \n        st = st*2.-1.;\n        float a = atan(st.x, st.y)+PI;\n        float r = length(st);\n        float v = TAU/float(V);\n        return cos(floor(.5+a/v)*v-a)*r;\n    \n    }\n    \n    #endif\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    #ifndef FNC_STARSDF\n    #define FNC_STARSDF\n    \n    #ifndef PI\n    #define PI 3.1415926535897932384626433832795\n    #endif\n    \n    #ifndef TAU\n    #define TAU 6.2831853071795864769252867665590\n    #endif\n    \n    float starSDF(vec2 st, int V, float s) {\n    \n        st = st*4.-2.;\n        float a = atan(st.y, st.x)/TAU;\n        float seg = a * float(V);\n        a = ((floor(seg) + .5)/float(V) + \n            mix(s, -s, step(.5, fract(seg))))\n            * TAU;\n        return abs(dot(vec2(cos(a), sin(a)), \n            st));\n    \n    }\n    \n    #endif\n    \n    #ifndef FNC_RATIO\n    #define FNC_RATIO\n    vec2 ratio(in vec2 st, in vec2 s) {\n        return mix( vec2((st.x*s.x/s.y)-(s.x*.5-s.y*.5)/s.y,st.y),\n                    vec2(st.x,st.y*(s.y/s.x)-(s.y*.5-s.x*.5)/s.x),\n                    step(s.x,s.y));\n    }\n    #endif\n    \n    \n    void main() {\n        float QRT_PI = PI/4.;\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\n        st = ratio(st, u_resolution);\n        vec3 color = vec3(0.);\n    \n        st = st*1.5;\n        st = st-.25;\n    \n        float bg = starSDF(st, 16, .1);\n        color += fill(bg, 1.3);\n        float l = 0.;\n        for (float i = 0.; i < 8.; i++) {\n            vec2 xy = rotate(st, QRT_PI*i);\n            xy.y -= .3;\n            float tri = polySDF(xy, 3);\n            color += fill(tri, .3);\n            l += stroke(tri, .3, .03);\n        }\n        color *= 1.-l;\n        float c = polySDF(st, 8);\n        color -= stroke(c, .15, .04);\n    \n        gl_FragColor = vec4(color,1.0);\n    }"
  }
};
var p5 = {
  sea: {
    setup: function setup(p5, canvasParentRef) {
      p5.createCanvas(canvasParentRef.clientWidth, 500, p5.WEBGL).parent(canvasParentRef);
    },
    windowResized: function windowResized(p5) {
      p5.resizeCanvas(p5["canvas"].parentElement.clientWidth, 500);
    },
    draw: function draw(p5) {
      p5.background(1050);
      p5.strokeWeight(3);
      p5.translate(800, 200, -90);
      p5.rotateY(-90);

      for (var i = 0; i < 15; i++) {
        p5.push();

        for (var j = 0; j < 15; j++) {
          if (j < i) continue;
          p5.push();
          p5.translate(i * 75, 0, j * 75);
          p5.box(70, Math.sin(p5.frameCount * 0.02 + j * 0.5 + i * 0.5) * 60 + 90, 70);
          p5.pop();
        }

        p5.pop();
      }
    }
  }
};
var aboutPageContent = {
  text: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: ["This site was made by me, ", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Anchor_Anchor__WEBPACK_IMPORTED_MODULE_1__.Anchor, {
        href: "https://www.linkedin.com/in/francesco-arillotta-104aa8122/",
        children: "Francesco Arillotta."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 1689,
        columnNumber: 33
      }, undefined), " Think of it as a fun weekend project to know me - a sort of expressive experiment through the weird crap I do."]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 1688,
      columnNumber: 5
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "I used a mix of technologies that I am very passionate about. Among those technologies are: Next.js, React, Typescript, GLSL, Three.js, P5.js, Framer/motion."
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1691,
      columnNumber: 5
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1694,
      columnNumber: 5
    }, undefined)]
  }, void 0, true)
};
var roles = [{
  company: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Anchor_Anchor__WEBPACK_IMPORTED_MODULE_1__.Anchor, {
    href: "https://www.ynap.com/",
    children: "Yoox Net-a-Porter"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1703,
    columnNumber: 14
  }, undefined),
  title: "Frontend Developer",
  location: "Bologna, Italy",
  date: "May 2021 - Present",
  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1708,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1711,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 1707,
    columnNumber: 15
  }, undefined),
  shader: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Shader_Shader__WEBPACK_IMPORTED_MODULE_2__.Shader, {
    shader: shaders.fullscreenFbm
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1715,
    columnNumber: 13
  }, undefined)
}, {
  company: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Anchor_Anchor__WEBPACK_IMPORTED_MODULE_1__.Anchor, {
    href: "https://www.sovrn.com/",
    children: "Sovrn"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1717,
    columnNumber: 14
  }, undefined),
  title: "Fullstack Software Engineer",
  location: "London, United Kingdom",
  date: "July 2020 - April 2021",
  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1722,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1725,
      columnNumber: 7
    }, undefined)]
  }, void 0, true),
  shader: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Shader_Shader__WEBPACK_IMPORTED_MODULE_2__.Shader, {
    shader: shaders.sun
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1729,
    columnNumber: 13
  }, undefined)
}, {
  company: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Anchor_Anchor__WEBPACK_IMPORTED_MODULE_1__.Anchor, {
    href: "https://www.sovrn.com/",
    children: "Sovrn"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1731,
    columnNumber: 14
  }, undefined),
  title: "Implementation Engineer II, Market Dev",
  location: "London, United Kingdom",
  date: "January 2020 - June 2020",
  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1736,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1739,
      columnNumber: 7
    }, undefined)]
  }, void 0, true),
  shader: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Shader_Shader__WEBPACK_IMPORTED_MODULE_2__.Shader, {
    shader: shaders.ditherTexture
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1743,
    columnNumber: 13
  }, undefined)
}, {
  company: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Anchor_Anchor__WEBPACK_IMPORTED_MODULE_1__.Anchor, {
    href: "https://www.sovrn.com/",
    children: "Sovrn"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1745,
    columnNumber: 14
  }, undefined),
  title: "Solutions Engineer",
  location: "London, United Kingdom",
  date: "May 2019 - December 2019",
  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1750,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1753,
      columnNumber: 7
    }, undefined)]
  }, void 0, true),
  shader: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Shader_Shader__WEBPACK_IMPORTED_MODULE_2__.Shader, {
    shader: shaders.simplexNoise
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1757,
    columnNumber: 13
  }, undefined)
}, {
  company: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Anchor_Anchor__WEBPACK_IMPORTED_MODULE_1__.Anchor, {
    href: "https://www.sovrn.com/",
    children: "Sovrn"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1759,
    columnNumber: 14
  }, undefined),
  title: "Operations Specialist",
  location: "London, United Kingdom",
  date: "August 2018 - May 2019",
  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1764,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
      children: "and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 1767,
      columnNumber: 7
    }, undefined)]
  }, void 0, true),
  shader: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Shader_Shader__WEBPACK_IMPORTED_MODULE_2__.Shader, {
    shader: shaders.raymarching
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1771,
    columnNumber: 13
  }, undefined)
}];
var terms = ["writing code", "listening to music", "watching a film", "possibly sleeping"];

var homepageText = /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
  children: ["Hi, I'm Fran. As you read this, I am ", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_TextCarousel_TextCarousel__WEBPACK_IMPORTED_MODULE_3__.TextCarousel, {
    terms: terms,
    color: "hsl(212deg 90% 64%)"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1777,
    columnNumber: 61
  }, undefined), " in ", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("del", {
    children: "London"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 1777,
    columnNumber: 124
  }, undefined), " Bologna, Italy."]
}, void 0, true);



;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,